diff a/core/schema/container.go b/core/schema/container.go	(rejected hunks)
@@ -80,6 +81,22 @@ func (s *containerSchema) Install() {
 				/run/secrets/my-secret)](http://example.com?token=$(cat
 					/run/secrets/my-secret))`),
 
+		dagql.Func("build", s.build).
+			View(AfterVersion("v0.18.3")).
+			Doc(`Initializes this container from a Dockerfile build.`).
+			ArgDoc("context", "Directory context used by the Dockerfile.").
+			ArgDoc("dockerfile", "Path to the Dockerfile to use.").
+			ArgDoc("buildArgs", "Additional build arguments.").
+			ArgDoc("target", "Target build stage to build.").
+			ArgDoc("secretArgs",
+				`Secrets to pass to the build.`,
+				`They will be mounted at /run/secrets/[secret-name] in the build container`,
+				`They can be accessed in the Dockerfile using the "secret" mount type
+				and mount path /run/secrets/[secret-name], e.g. RUN
+				--mount=type=secret,id=my-secret curl [http://example.com?token=$(cat
+				/run/secrets/my-secret)](http://example.com?token=$(cat
+					/run/secrets/my-secret))`),
+
 		dagql.Func("rootfs", s.rootfs).
 			Doc(`Retrieves this container's root filesystem. Mounts are not included.`),
 
@@ -796,15 +813,39 @@ type containerBuildArgs struct {
 	Secrets    []core.SecretID                    `default:"[]"`
 }
 
+func (s *containerSchema) buildLegacy(ctx context.Context, parent *core.Container, args containerBuildArgsLegacy) (*core.Container, error) {
+	inps := []dagql.InputObject[core.SecretArg]{}
+	for _, secret := range args.Secrets {
+		inps = append(inps, dagql.InputObject[core.SecretArg]{
+			Value: core.SecretArg{
+				Value: secret,
+			},
+		})
+	}
+
+	return s.build(ctx, parent, containerBuildArgs{
+		Context:    args.Context,
+		Dockerfile: args.Dockerfile,
+		Target:     args.Target,
+		BuildArgs:  args.BuildArgs,
+		SecretArgs: inps,
+	})
+}
+
+type containerBuildArgs struct {
+	Context    core.DirectoryID
+	Dockerfile string                              `default:"Dockerfile"`
+	Target     string                              `default:""`
+	BuildArgs  []dagql.InputObject[core.BuildArg]  `default:"[]"`
+	SecretArgs []dagql.InputObject[core.SecretArg] `default:"[]"`
+}
+
 func (s *containerSchema) build(ctx context.Context, parent *core.Container, args containerBuildArgs) (*core.Container, error) {
 	dir, err := args.Context.Load(ctx, s.srv)
 	if err != nil {
 		return nil, err
 	}
-	secrets, err := dagql.LoadIDs(ctx, s.srv, args.Secrets)
-	if err != nil {
-		return nil, err
-	}
+
 	secretStore, err := parent.Query.Secrets(ctx)
 	if err != nil {
 		return nil, err
@@ -822,7 +888,7 @@ func (s *containerSchema) build(ctx context.Context, parent *core.Container, arg
 		args.Dockerfile,
 		collectInputsSlice(args.BuildArgs),
 		args.Target,
-		secrets,
+		vals,
 		secretStore,
 	)
 }
