// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitconfig.proto

package session

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GitConfigErrorInfo_GitConfigErrorType int32

const (
	GC_UNKNOWN                     GitConfigErrorInfo_GitConfigErrorType = 0
	GC_INVALID_REQUEST             GitConfigErrorInfo_GitConfigErrorType = 1
	GC_NO_GIT                      GitConfigErrorInfo_GitConfigErrorType = 2
	GC_TIMEOUT                     GitConfigErrorInfo_GitConfigErrorType = 3
	GC_GIT_CONFIG_RETRIEVAL_FAILED GitConfigErrorInfo_GitConfigErrorType = 4
)

var GitConfigErrorInfo_GitConfigErrorType_name = map[int32]string{
	0: "GC_UNKNOWN",
	1: "GC_INVALID_REQUEST",
	2: "GC_NO_GIT",
	3: "GC_TIMEOUT",
	4: "GC_GIT_CONFIG_RETRIEVAL_FAILED",
}

var GitConfigErrorInfo_GitConfigErrorType_value = map[string]int32{
	"GC_UNKNOWN":                     0,
	"GC_INVALID_REQUEST":             1,
	"GC_NO_GIT":                      2,
	"GC_TIMEOUT":                     3,
	"GC_GIT_CONFIG_RETRIEVAL_FAILED": 4,
}

func (GitConfigErrorInfo_GitConfigErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16928719a32a618c, []int{2, 0}
}

type GitConfigRequest struct {
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *GitConfigRequest) Reset()      { *m = GitConfigRequest{} }
func (*GitConfigRequest) ProtoMessage() {}
func (*GitConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16928719a32a618c, []int{0}
}
func (m *GitConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GitConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GitConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GitConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitConfigRequest.Merge(m, src)
}
func (m *GitConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *GitConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GitConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GitConfigRequest proto.InternalMessageInfo

func (m *GitConfigRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type GitConfigResponse struct {
	// Types that are valid to be assigned to Result:
	//	*GitConfigResponse_Content
	//	*GitConfigResponse_Error
	Result isGitConfigResponse_Result `protobuf_oneof:"result"`
}

func (m *GitConfigResponse) Reset()      { *m = GitConfigResponse{} }
func (*GitConfigResponse) ProtoMessage() {}
func (*GitConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16928719a32a618c, []int{1}
}
func (m *GitConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GitConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GitConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GitConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitConfigResponse.Merge(m, src)
}
func (m *GitConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GitConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GitConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GitConfigResponse proto.InternalMessageInfo

type isGitConfigResponse_Result interface {
	isGitConfigResponse_Result()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GitConfigResponse_Content struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3,oneof" json:"content,omitempty"`
}
type GitConfigResponse_Error struct {
	Error *GitConfigErrorInfo `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*GitConfigResponse_Content) isGitConfigResponse_Result() {}
func (*GitConfigResponse_Error) isGitConfigResponse_Result()   {}

func (m *GitConfigResponse) GetResult() isGitConfigResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GitConfigResponse) GetContent() string {
	if x, ok := m.GetResult().(*GitConfigResponse_Content); ok {
		return x.Content
	}
	return ""
}

func (m *GitConfigResponse) GetError() *GitConfigErrorInfo {
	if x, ok := m.GetResult().(*GitConfigResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GitConfigResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GitConfigResponse_Content)(nil),
		(*GitConfigResponse_Error)(nil),
	}
}

type GitConfigErrorInfo struct {
	Type    GitConfigErrorInfo_GitConfigErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=GitConfigErrorInfo_GitConfigErrorType" json:"type,omitempty"`
	Message string                                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *GitConfigErrorInfo) Reset()      { *m = GitConfigErrorInfo{} }
func (*GitConfigErrorInfo) ProtoMessage() {}
func (*GitConfigErrorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_16928719a32a618c, []int{2}
}
func (m *GitConfigErrorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GitConfigErrorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GitConfigErrorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GitConfigErrorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitConfigErrorInfo.Merge(m, src)
}
func (m *GitConfigErrorInfo) XXX_Size() int {
	return m.Size()
}
func (m *GitConfigErrorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GitConfigErrorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GitConfigErrorInfo proto.InternalMessageInfo

func (m *GitConfigErrorInfo) GetType() GitConfigErrorInfo_GitConfigErrorType {
	if m != nil {
		return m.Type
	}
	return GC_UNKNOWN
}

func (m *GitConfigErrorInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("GitConfigErrorInfo_GitConfigErrorType", GitConfigErrorInfo_GitConfigErrorType_name, GitConfigErrorInfo_GitConfigErrorType_value)
	proto.RegisterType((*GitConfigRequest)(nil), "GitConfigRequest")
	proto.RegisterType((*GitConfigResponse)(nil), "GitConfigResponse")
	proto.RegisterType((*GitConfigErrorInfo)(nil), "GitConfigErrorInfo")
}

func init() { proto.RegisterFile("gitconfig.proto", fileDescriptor_16928719a32a618c) }

var fileDescriptor_16928719a32a618c = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x67, 0xd6, 0x75, 0xbb, 0x79, 0xe2, 0x9a, 0x1d, 0x41, 0x4a, 0x0f, 0xc3, 0x92, 0x83,
	0x2c, 0x08, 0x39, 0xc4, 0x9b, 0x20, 0xd2, 0xcd, 0xa6, 0xd3, 0xc1, 0x9a, 0xe0, 0x98, 0x56, 0xf0,
	0x32, 0x68, 0x99, 0x96, 0x40, 0xcd, 0xc4, 0xcc, 0xf4, 0xd0, 0x93, 0x7e, 0x04, 0x3f, 0x86, 0x1f,
	0xc5, 0x63, 0x8f, 0x3d, 0xda, 0xf4, 0x22, 0x78, 0xe9, 0x47, 0x90, 0xa6, 0xb6, 0x48, 0xbb, 0xc7,
	0xff, 0xff, 0xfd, 0x7f, 0xef, 0x3d, 0xf8, 0xc3, 0xa3, 0x71, 0x66, 0x87, 0x3a, 0x1f, 0x65, 0x63,
	0xbf, 0x28, 0xb5, 0xd5, 0x9e, 0x0f, 0x2e, 0xcb, 0x6c, 0x58, 0x5b, 0x42, 0x7d, 0x99, 0x2a, 0x63,
	0x49, 0x0b, 0xce, 0xeb, 0xe1, 0x50, 0x4f, 0x9a, 0xf8, 0x0a, 0x5f, 0x3b, 0x62, 0xaf, 0xbd, 0x11,
	0x5c, 0xfe, 0x97, 0x37, 0x85, 0xce, 0x8d, 0x22, 0x2d, 0x68, 0x0c, 0x75, 0x6e, 0x55, 0x6e, 0xb7,
	0xf9, 0x2e, 0x12, 0x3b, 0x83, 0x3c, 0x83, 0xfb, 0xaa, 0x2c, 0x75, 0xd9, 0x3c, 0xb9, 0xc2, 0xd7,
	0x0f, 0x82, 0xc7, 0xfe, 0x1e, 0x8f, 0x36, 0x36, 0xcf, 0x47, 0xba, 0x8b, 0xc4, 0x36, 0x73, 0x73,
	0x0e, 0x67, 0xa5, 0x32, 0xd3, 0x89, 0xf5, 0xfe, 0x60, 0x20, 0xc7, 0x49, 0xf2, 0x02, 0x4e, 0xed,
	0xac, 0x50, 0xf5, 0x99, 0x8b, 0xe0, 0xe9, 0x1d, 0xcb, 0x0e, 0xac, 0x74, 0x56, 0x28, 0x51, 0x33,
	0xa4, 0x09, 0x8d, 0xcf, 0xca, 0x98, 0x8f, 0x63, 0x55, 0xff, 0xe2, 0x88, 0x9d, 0xf4, 0xbe, 0x1e,
	0xde, 0xda, 0x50, 0xe4, 0x02, 0x80, 0x85, 0xb2, 0x1f, 0xbf, 0x8e, 0x93, 0xf7, 0xb1, 0x8b, 0xc8,
	0x13, 0x20, 0x2c, 0x94, 0x3c, 0x1e, 0xb4, 0x7b, 0xfc, 0x56, 0x8a, 0xe8, 0x6d, 0x3f, 0x7a, 0x97,
	0xba, 0x98, 0x3c, 0x04, 0x87, 0x85, 0x32, 0x4e, 0x24, 0xe3, 0xa9, 0x7b, 0xf2, 0x0f, 0x4b, 0xf9,
	0x9b, 0x28, 0xe9, 0xa7, 0xee, 0x3d, 0xe2, 0x01, 0x65, 0xe1, 0x66, 0x26, 0xc3, 0x24, 0xee, 0x70,
	0x26, 0x45, 0x94, 0x0a, 0x1e, 0x0d, 0xda, 0x3d, 0xd9, 0x69, 0xf3, 0x5e, 0x74, 0xeb, 0x9e, 0x06,
	0xaf, 0xc0, 0xd9, 0x3f, 0x40, 0x02, 0x70, 0x98, 0xda, 0x89, 0x4b, 0xff, 0xb0, 0x9e, 0x16, 0xf1,
	0x8f, 0x1a, 0xb8, 0x79, 0x39, 0x5f, 0x52, 0xb4, 0x58, 0x52, 0xb4, 0x5e, 0x52, 0xfc, 0xad, 0xa2,
	0xf8, 0x47, 0x45, 0xf1, 0xcf, 0x8a, 0xe2, 0x79, 0x45, 0xf1, 0xaf, 0x8a, 0xe2, 0xdf, 0x15, 0x45,
	0xeb, 0x8a, 0xe2, 0xef, 0x2b, 0x8a, 0xe6, 0x2b, 0x8a, 0x16, 0x2b, 0x8a, 0x3e, 0x34, 0x8c, 0x32,
	0x26, 0xd3, 0xf9, 0xa7, 0xb3, 0xba, 0xdf, 0xe7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xea,
	0xa9, 0x21, 0x1f, 0x02, 0x00, 0x00,
}

func (x GitConfigErrorInfo_GitConfigErrorType) String() string {
	s, ok := GitConfigErrorInfo_GitConfigErrorType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GitConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GitConfigRequest)
	if !ok {
		that2, ok := that.(GitConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *GitConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GitConfigResponse)
	if !ok {
		that2, ok := that.(GitConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Result == nil {
		if this.Result != nil {
			return false
		}
	} else if this.Result == nil {
		return false
	} else if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *GitConfigResponse_Content) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GitConfigResponse_Content)
	if !ok {
		that2, ok := that.(GitConfigResponse_Content)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *GitConfigResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GitConfigResponse_Error)
	if !ok {
		that2, ok := that.(GitConfigResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *GitConfigErrorInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GitConfigErrorInfo)
	if !ok {
		that2, ok := that.(GitConfigErrorInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *GitConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&session.GitConfigRequest{")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GitConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&session.GitConfigResponse{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GitConfigResponse_Content) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&session.GitConfigResponse_Content{` +
		`Content:` + fmt.Sprintf("%#v", this.Content) + `}`}, ", ")
	return s
}
func (this *GitConfigResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&session.GitConfigResponse_Error{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *GitConfigErrorInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&session.GitConfigErrorInfo{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGitconfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GitConfigClient is the client API for GitConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitConfigClient interface {
	GetConfig(ctx context.Context, in *GitConfigRequest, opts ...grpc.CallOption) (*GitConfigResponse, error)
}

type gitConfigClient struct {
	cc *grpc.ClientConn
}

func NewGitConfigClient(cc *grpc.ClientConn) GitConfigClient {
	return &gitConfigClient{cc}
}

func (c *gitConfigClient) GetConfig(ctx context.Context, in *GitConfigRequest, opts ...grpc.CallOption) (*GitConfigResponse, error) {
	out := new(GitConfigResponse)
	err := c.cc.Invoke(ctx, "/GitConfig/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitConfigServer is the server API for GitConfig service.
type GitConfigServer interface {
	GetConfig(context.Context, *GitConfigRequest) (*GitConfigResponse, error)
}

// UnimplementedGitConfigServer can be embedded to have forward compatible implementations.
type UnimplementedGitConfigServer struct {
}

func (*UnimplementedGitConfigServer) GetConfig(ctx context.Context, req *GitConfigRequest) (*GitConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}

func RegisterGitConfigServer(s *grpc.Server, srv GitConfigServer) {
	s.RegisterService(&_GitConfig_serviceDesc, srv)
}

func _GitConfig_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitConfigServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GitConfig/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitConfigServer).GetConfig(ctx, req.(*GitConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GitConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GitConfig",
	HandlerType: (*GitConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _GitConfig_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitconfig.proto",
}

func (m *GitConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GitConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GitConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintGitconfig(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GitConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GitConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GitConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GitConfigResponse_Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GitConfigResponse_Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Content)
	copy(dAtA[i:], m.Content)
	i = encodeVarintGitconfig(dAtA, i, uint64(len(m.Content)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *GitConfigResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GitConfigResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGitconfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GitConfigErrorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GitConfigErrorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GitConfigErrorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintGitconfig(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintGitconfig(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGitconfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovGitconfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GitConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGitconfig(uint64(l))
	}
	return n
}

func (m *GitConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *GitConfigResponse_Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	n += 1 + l + sovGitconfig(uint64(l))
	return n
}
func (m *GitConfigResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovGitconfig(uint64(l))
	}
	return n
}
func (m *GitConfigErrorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGitconfig(uint64(m.Type))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovGitconfig(uint64(l))
	}
	return n
}

func sovGitconfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGitconfig(x uint64) (n int) {
	return sovGitconfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GitConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GitConfigRequest{`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GitConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GitConfigResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GitConfigResponse_Content) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GitConfigResponse_Content{`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GitConfigResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GitConfigResponse_Error{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "GitConfigErrorInfo", "GitConfigErrorInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GitConfigErrorInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GitConfigErrorInfo{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGitconfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GitConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGitconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGitconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGitconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGitconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGitconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGitconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGitconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGitconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGitconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGitconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = &GitConfigResponse_Content{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGitconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGitconfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGitconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GitConfigErrorInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &GitConfigResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGitconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGitconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitConfigErrorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGitconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitConfigErrorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitConfigErrorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGitconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= GitConfigErrorInfo_GitConfigErrorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGitconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGitconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGitconfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGitconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGitconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGitconfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGitconfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGitconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGitconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGitconfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGitconfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGitconfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGitconfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGitconfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGitconfig = fmt.Errorf("proto: unexpected end of group")
)
