syntax = "proto3";

option go_package = "session";

service GitConfig {
  rpc GetConfig(GitConfigRequest) returns (GitConfigResponse);
}

message GitConfigRequest {
  string protocol = 1;
}

message GitConfigResponse {
  oneof result {
    GitConfigX x = 1;
    GitConfigErrorInfo error = 2;
  }
}

message GitConfigX {
  string content = 1;
  string goprivate = 2;
}

message GitConfigErrorInfo {
  enum GitConfigErrorType {
    GC_UNKNOWN = 0;
    GC_INVALID_REQUEST = 1;
    GC_NO_GIT = 2;
    GC_TIMEOUT = 3;
    GC_GIT_CONFIG_RETRIEVAL_FAILED = 4;
}
  GitConfigErrorType type = 1;
  string message = 2;
}

